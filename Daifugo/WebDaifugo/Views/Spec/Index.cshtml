@{
    ViewBag.Title = "プログラム仕様";
}
@Html.Partial("_HeaderNav")
<div class="container">
    <h2>@ViewBag.Title</h2>
    <h3>概要</h3>
    <div class="row">
        <div class="col-sm-10 col-sm-offset-1">
            <p>
                コンピュータ大富豪の対戦は、ゲーム進行をつかさどるマスタープログラムと、プレイヤーとなるプログラムが相互に通信することで進行します。
			マスタープログラムはWebアプリケーションであり、このWebサイトにホスティングされています。<br />
                大会参加者は、プレイヤープログラムを作成し、サーバに接続すると、ゲームの情況が送られてくるので、自分の手番がまわってきたら応答を返すだけです。
				プレイヤープログラムの動作プラットフォームや言語等は何でも構いません。
				ただし通信にはWebSocketを利用しますので、WebSocketライブラリが存在するプラットフォームの方が作りやすいです。
            </p>
        </div>
    </div>

    <h3>接続方法</h3>
    <div class="row">
        <div class="col-sm-10 col-sm-offset-1">
            <p>
                接続URL
				<pre>ws://neofugo1.neogenia.co.jp:80/play/{A|B}/{RoomID}?name={ProgramName}</pre>
                WebSocketにて上記URLに接続してください。
            </p>
            <ul>
                <li>{A|B}のところは、クラスＡのプログラムなら "A" を、クラスＢのプログラムなら "B" としてください。</li>
                <li>{RoomID}には、対戦が行われる部屋のIDを渡してください。大会当日は、運営本部よりIDの連絡があります。</li>
                <li>{ProgramName}のところは、プログラムの名前をURLエンコードして渡してください。</li>
                <li class="text-dainger">ホスト名およびポート番号は、大会当日に専用のホストが発表されますので、変更可能なようにしておいて下さい。</li>
            </ul>
            例： JavaScript で接続する場合（クラスＡ、RoomID=12345）
			<pre>var socket = new WebSocket('ws://neofugo1.neogenia.co.jp:80/play/A/12345?name=Hogehoge');</pre>
        </div>
    </div>

    <h3>プロトコル概要</h3>
    <div class="row">
        <div class="col-sm-10 col-sm-offset-1">
            <p>
                WebSocket で接続した後は、ゲームが始まるまで通信はありません。ゲームが始まると、サーバから逐一データが送られてきます。
				データは JSON 形式で送受信します。1回の送受信データ（1回のOnMessage着信）で1つのメッセージが完結しています。1つのメッセージが複数回に分けて送信されることはありません。
				メッセージの内容は、たとえば以下のような形式です。
            </p>
            <pre>
{
	"YourNum":0,                                // 受信者の番号（接続順に0から振られます）
	"Kind":"ProcessTurn",                       // ゲーム内で起こったイベントの種類
	"Teban":0,                                  // 現在の手番（プレイヤー番号）
	"IsKakumei":false,                          // 革命中かどうか
	"PlayerInfo":[                              // 対戦中のプレイヤーの情報
		{"Name":"ExampleProgram","HavingCardCount":11,"Ranking":0,"OrderOfFinish":0},
		{"Name":"COM1","HavingCardCount":11,"Ranking":0,"OrderOfFinish":0},
		{"Name":"COM2","HavingCardCount":10,"Ranking":0,"OrderOfFinish":0},
		{"Name":"COM3","HavingCardCount":9,"Ranking":0,"OrderOfFinish":0},
		{"Name":"COM4","HavingCardCount":9,"Ranking":0,"OrderOfFinish":0}],
	"Deck":"D3 H3 D4 S7 H9 D0 SJ CQ SQ DA JK",   // 現在の手札（1枚のカードを2文字で表します）
	"Ba":["S3","D5","S6"],                       // 場に出ているカード
	"Yama":"",                                   // 山にあるカード（流れたカード）
	"History":"2-[S3] 3-[D5] 4-[S6]"             // ゲームの初手から現在局面までの手の全履歴
}
			</pre>
            <p>
                ゲーム内で何か進展があると、その種類に応じてデータが送られてきますが、すべてに応答する必要はありません。
				応答が必要なのは自分の手番が回ってきたときだけです。
            </p>
        </div>
    </div>

    <h3>プロトコル詳細</h3>
    <div class="row">
        <div class="col-sm-10 col-sm-offset-1">
            <h4>サーバから送られるメッセージ</h4>
            <p>～～～執筆中～～～</p>
            <h4>プレイヤーから送るメッセージ</h4>
            <p>～～～執筆中～～～</p>
        </div>
    </div>

</div>
